<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <title>APAS</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0"/>

        <link href="resources/theme-crisp-all.css" rel="stylesheet" type="text/css"/>
        <script src="resources/ext.js" type="text/javascript"></script>
        <script src="resources/scripts/BatchContributionUpload.js" type="text/javascript"></script>

        <style>
            .box {margin: 50px;}
            .fabold {font-family:arial;font-weight:bold;}
        </style>
    </head>
    <body>
        <div id="output" class="box"></div>
        <div id="gridDiv"></div>
        <input type="button" id="show-btn" value="Members Module" />

        <script>
            var membersGrid;
            var gridStore;
            Ext.onReady(function () {
                Ext.define('StudentDataModel', {
                    extend: 'Ext.data.Model',
                    fields: [
                        {name: 'id', type: 'int'},
                        {name: 'MemberNo', type: 'string'},
                        {name: 'MemberName', type: 'string'},
                        {name: 'SchemeJoin', type: 'string'},
                        {name: 'DateEmployed', type: 'string'},
                        {name: 'BirthDate', type: 'string'},
                        {name: 'PhoneNumber', type: 'string'},
                        {name: 'Designation', type: 'string'},
                        {name: 'Department', type: 'string'}
                    ]
                });
                gridStore = Ext.create('Ext.data.Store', {
                    model: 'StudentDataModel',
                    pageSize: 4,
                    proxy: {
                        type: 'rest',
                        actionMethods: {
                            read: 'GET'
                        },
                        url: '/APAS/member/members',
                        reader: {
                            type: 'json',
                            root: 'data'
                        }
                    },
                    autoLoad: true
                });
                membersGrid = Ext.create('Ext.grid.Panel', {
                    id: 'gridId',
                    store: gridStore,
                    selModel: {
                        selType: 'checkboxmodel',
                        mode: 'MULTI'
                    },
                    dockedItems: [{
                            xtype: 'pagingtoolbar',
                            store: gridStore, // same store GridPanel is using
                            dock: 'bottom',
                            displayInfo: true
                        }],
                    stripeRows: true,
                    title: 'Members', // Title for the grid
                    //renderTo          :'gridDiv', // Div id where the grid has to be rendered
                    width: 800,
                    collapsible: true, // property to collapse grid
                    enableColumnMove: true, // property which allows column to move to different position by dragging that column.
                    enableColumnResize: true, // property which allows to resize column run time.

                    columns:
                            [
                                {header: 'ID', dataIndex: 'id'},
                                {header: 'Member No.', dataIndex: 'MemberNo'},
                                {header: 'Member Name', dataIndex: 'MemberName'},
                                {header: 'Date Joined Scheme', dataIndex: 'SchemeJoin'},
                                {header: 'Date of Employment', dataIndex: 'DateEmployed'},
                                {header: 'Date of Birth', dataIndex: 'BirthDate'},
                                {header: 'Phone Number', dataIndex: 'PhoneNumber'},
                                {header: 'Designation', dataIndex: 'Designation'},
                                {header: 'Department', dataIndex: 'Department'}
                            ],
                    tbar: [

                        {

                            text: 'Add Member',
                            tooltip: 'Add a new Member',
                            cls: 'x-btn-text-icon',
                            handler: function () {

                                var form = new Ext.form.FormPanel({

                                    baseCls: 'x-plain',
                                    labelWidth: 75,
                                    name: 'MyForm',
                                    //url: '/tutorial/rest/issuer/addIssuer',

                                    defaultType: 'textfield',
                                    items: [
                                        {
                                            xtype: 'fileuploadfield',
                                            fieldLabel: 'Path To Signature',
                                            allowBlank: false,
                                            name: 'signature',
                                            anchor: '100%'
                                        },
                                        {

                                            fieldLabel: 'Title:',
                                            id: 'title',
                                            name: 'title',
                                            allowBlank: false,
                                            anchor: '100%'  // anchor width by percentage

                                        },
                                        {

                                            fieldLabel: 'Member No.:',
                                            id: 'memberNo',
                                            name: 'memberNo',
                                            allowBlank: false,
                                            anchor: '100%'  // anchor width by percentage

                                        },
                                        {

                                            fieldLabel: 'Surname:',
                                            id: 'surname',
                                            name: 'surname',
                                            allowBlank: false,
                                            anchor: '100%'  // anchor width by percentage

                                        }, {

                                            fieldLabel: 'Other Names:',
                                            id: 'otherNames',
                                            name: 'otherNames',
                                            allowBlank: false,
                                            anchor: '100%'  // anchor width by percentage

                                        },
                                        {

                                            fieldLabel: 'Email Address:',
                                            id: 'emailAddress',
                                            name: 'emailAddress',
                                            allowBlank: false,
                                            anchor: '100%'  // anchor width by percentage

                                        },
                                        {

                                            fieldLabel: 'Designation:',
                                            id: 'designation',
                                            name: 'designation',
                                            allowBlank: false,
                                            anchor: '100%'  // anchor width by percentage

                                        },
                                        {

                                            fieldLabel: 'Phone Number:',
                                            id: 'phoneNumber',
                                            name: 'phoneNumber',
                                            allowBlank: false,
                                            anchor: '100%'  // anchor width by percentage

                                        },
                                        {

                                            fieldLabel: 'Department:',
                                            id: 'department',
                                            name: 'department',
                                            allowBlank: false,
                                            anchor: '100%'  // anchor width by percentage

                                        },
                                        {

                                            fieldLabel: 'Date of Birth:',
                                            id: 'dateOfBirth',
                                            name: 'dateOfBirth',
                                            allowBlank: false,
                                            anchor: '100%',
                                            xtype: 'datefield',
                                            format: 'd-m-Y',
                                            submitFormat: 'd-m-Y'

                                        },
                                        {

                                            fieldLabel: 'Date of Employment:',
                                            id: 'dateOfEmployment',
                                            name: 'dateOfEmployment',
                                            allowBlank: false,
                                            anchor: '100%',
                                            xtype: 'datefield',
                                            format: 'd-m-Y',
                                            submitFormat: 'd-m-Y'

                                        },
                                        {

                                            fieldLabel: 'Date of Joining Scheme:',
                                            id: 'dateJoinedScheme',
                                            name: 'dateJoinedScheme',
                                            allowBlank: false,
                                            anchor: '100%',
                                            xtype: 'datefield',
                                            format: 'd-m-Y',
                                            submitFormat: 'd-m-Y'

                                        },
                                        {

                                            fieldLabel: 'Payroll Number:',
                                            id: 'payroll',
                                            name: 'payroll',
                                            allowBlank: false,
                                            anchor: '100%'  // anchor width by percentage

                                        },
                                        {

                                            fieldLabel: 'PIN Number:',
                                            id: 'pinNo',
                                            name: 'pinNo',
                                            allowBlank: false,
                                            anchor: '100%'  // anchor width by percentage

                                        }

                                    ]

                                });
                                var window = new Ext.Window({

                                    title: 'Add New Member',
                                    width: 350,
                                    height: 600,
                                    minWidth: 350,
                                    minHeight: 180,
                                    layout: 'fit',
                                    plain: true,
                                    bodyStyle: 'padding:5px;',
                                    buttonAlign: 'center',
                                    resizable: true,
                                    autoScroll: true,
                                    items: form,
                                    buttons: [{

                                            text: 'Save Member',
                                            handler: function () {
//                                                var frm = this.up('MyForm').getForm();

                                                Ext.Ajax.request({
                                                    url: '/APAS/member/members',
                                                    method: 'POST',
                                                    headers: {'Content-Type': 'application/json'},
                                                    jsonData: {
                                                        "MemberNo": Ext.getCmp('memberNo').getValue(),
                                                        "EmailAddress": Ext.getCmp('emailAddress').getValue(),
                                                        "PhoneNumber": Ext.getCmp('phoneNumber').getValue(),
                                                        "Designation": Ext.getCmp('designation').getValue(),
                                                        "Department": Ext.getCmp('department').getValue(),
                                                        "DateEmployed": formatDate(Ext.getCmp('dateOfEmployment').getValue()),
                                                        "BirthDate": formatDate(Ext.getCmp('dateOfBirth').getValue()),
                                                        "SchemeJoin": formatDate(Ext.getCmp('dateJoinedScheme').getValue()),
                                                        "PIN": Ext.getCmp('pinNo').getValue(),
                                                        "Payroll": Ext.getCmp('payroll').getValue(),
                                                        "Title": Ext.getCmp('title').getValue(),
                                                        "Surname": Ext.getCmp('surname').getValue(),
                                                        "OtherNames": Ext.getCmp('otherNames').getValue()
                                                    },
                                                    success: function (response) {
                                                        gridStore.reload();
                                                        Ext.Msg.alert("Info", "Data saved successfully : ");
                                                    },
                                                    failure: function (response) {
                                                        Ext.Msg.alert("Error", jsonResp.error);
                                                    }
                                                });
                                            }

                                        }, {

                                            text: 'Cancel',
                                            handler: function () {

                                                if (window) {

                                                    window.close();
                                                }

                                            }

                                        }]

                                });
                                window.show();
                            }

                        }]
                });
            });
            var win,
                    button = Ext.get('show-btn');
            button.on('click', function () {

                if (!win) {
                    win = Ext.create('widget.window', {
                        title: 'Members Register',
                        header: {
                            titlePosition: 2,
                            titleAlign: 'center'
                        },
                        closable: true,
                        closeAction: 'hide',
                        maximizable: true,
                        animateTarget: button,
                        width: 1000,
                        minWidth: 350,
                        height: 350,
                        tools: [{type: 'pin'}],
                        layout: {
                            type: 'border',
                            padding: 5
                        },
                        items: [
//                            {
//                                region: 'west',
//                                title: 'Navigation',
//                                width: 200,
//                                split: true,
//                                collapsible: true,
//                                floatable: false
//                            }, 
                            {
                                region: 'center',
                                xtype: 'tabpanel',
                                items: [
                                    membersGrid,
                                    {
                                        title: 'Running of Balances',
                                        html: 'Hello world 2',
                                        closable: true
                                    }, {
                                        title: 'Interest Rates',
                                        html: 'Hello world 3',
                                        closable: true
                                    }]
                            }]
                    });
                }
                button.dom.disabled = true;
                if (win.isVisible()) {
                    win.hide(this, function () {
                        button.dom.disabled = false;
                    });
                } else {
                    win.show(this, function () {
                        button.dom.disabled = false;
                    });
                }
            });
            function formatDate(date) {

                return Ext.Date.format(date, 'd-m-Y');
            }

            Ext.create('Ext.toolbar.Toolbar', {
                renderTo: document.body,
                width: 500,
                items: [
                    {
                        // xtype: 'button', // default for Toolbars
                        text: 'Button'
                    },
                    {
                        xtype: 'splitbutton',
                        text: 'Split Button'
                    },
                    // begin using the right-justified button container
                    '->', // same as { xtype: 'tbfill' }
                    {
                        xtype: 'textfield',
                        name: 'field1',
                        emptyText: 'enter search term'
                    },
                    // add a vertical separator bar between toolbar items
                    '-', // same as {xtype: 'tbseparator'} to create Ext.toolbar.Separator
                    'text 1', // same as {xtype: 'tbtext', text: 'text1'} to create Ext.toolbar.TextItem
                    {xtype: 'tbspacer'}, // same as ' ' to create Ext.toolbar.Spacer
                    'text 2',
                    {xtype: 'tbspacer', width: 50}, // add a 50px space
                    'text 3'
                ]
            });

            var toolbar = Ext.create('Ext.toolbar.Toolbar', {
                renderTo: document.body,
                width: 700,
                items: [
                    {
                        text: 'Example Button'
                    }
                ]
            });

            var addedItems = [];

            Ext.create('Ext.toolbar.Toolbar', {
                renderTo: document.body,
                width: 700,
                margin: '5 0 0 0',
                items: [
                    {
                        text: 'Add a button',
                        scope: this,
                        handler: function () {
                            var text = prompt('Please enter the text for your button:');
                            addedItems.push(toolbar.add({
                                text: text
                            }));
                        }
                    },
                    {
                        text: 'Add a text item',
                        scope: this,
                        handler: function () {
                            var text = prompt('Please enter the text for your item:');
                            addedItems.push(toolbar.add(text));
                        }
                    },
                    {
                        text: 'Add a toolbar separator',
                        scope: this,
                        handler: function () {
                            addedItems.push(toolbar.add('-'));
                        }
                    },
                    {
                        text: 'Add a toolbar spacer',
                        scope: this,
                        handler: function () {
                            addedItems.push(toolbar.add('->'));
                        }
                    },
                    '->',
                    {
                        text: 'Remove last inserted item',
                        scope: this,
                        handler: function () {
                            if (addedItems.length) {
                                toolbar.remove(addedItems.pop());
                            } else if (toolbar.items.length) {
                                toolbar.remove(toolbar.items.last());
                            } else {
                                alert('No items in the toolbar');
                            }
                        }
                    },
                    {
                        text: 'Remove all items',
                        scope: this,
                        handler: function () {
                            toolbar.removeAll();
                        }
                    }
                ]
            });

            var panel = Ext.create('Ext.panel.Panel', {
                renderTo: Ext.getBody(),
                title: 'Example Add Tab Programmatically',
                layout: 'border',
                height: 1000,
                width: 1000,
                items: [{
                        region: 'west',
                        width: '15%',
                        title: 'West'
                    }, {
                        region: 'center',
                        xtype: 'tabpanel',
                        listeners: {
                            render: function (tabPanel) {
                                console.log(tabPanel.down('#addNewTab').tab.on('click', function () {
                                    console.log('added tab');
                                    var addIndex = tabPanel.items.length - 1;
                                    tabPanel.insert(addIndex, {
                                        title: 'Another Tab!',
                                        closable: true
                                    });
                                    tabPanel.setActiveTab(addIndex);
                                }));
                            }
                        },
                        items: [{
                                title: 'New Tab',
                                html: 'Tab content',
                                collapsible: true
                            }, {
                                title: 'Add tab',
                                itemId: 'addNewTab'
                            }]
                    }]
            });
        </script>
    </body>


</html>

